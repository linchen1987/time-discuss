generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  username          String?            @unique
  email             String?            @unique
  hashedPassword    String?
  name              String?
  avatarUrl         String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  commentLikes      CommentLike[]
  comments          Comment[]
  repliedComments   Comment[]          @relation("CommentReplyTo")
  likes             Like[]
  notifications     Notification[]     @relation("UserNotification")
  posts             Post[]
  pushSubscriptions PushSubscription[]
  sessions          Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id            String         @id @default(cuid())
  authorId      String
  lexicalState  Json
  contentHtml   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comment[]
  likes         Like[]
  notifications Notification[] @relation("PostNotification")
  images        PostImage[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model PostImage {
  id         String   @id @default(cuid())
  url        String
  altText    String?
  postId     String
  uploadedAt DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_images")
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  authorId      String
  postId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contentHtml   String?
  lexicalState  Json?
  replyToUserId String?
  images        CommentImage[]
  likes         CommentLike[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyToUser   User?          @relation("CommentReplyTo", fields: [replyToUserId], references: [id])
  notifications Notification[] @relation("CommentNotification")

  @@map("comments")
}

model CommentImage {
  id         String   @id @default(cuid())
  url        String
  altText    String?
  commentId  String
  uploadedAt DateTime @default(now())
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("comment_images")
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Notification {
  id          String   @id @default(cuid())
  recipientId String
  actorId     String?
  type        String
  postId      String?
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  commentId   String?
  comment     Comment? @relation("CommentNotification", fields: [commentId], references: [id], onDelete: Cascade)
  post        Post?    @relation("PostNotification", fields: [postId], references: [id], onDelete: Cascade)
  recipient   User     @relation("UserNotification", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
